[{"/var/www/frontend/src/index.tsx":"1","/var/www/frontend/src/reportWebVitals.ts":"2","/var/www/frontend/src/App.tsx":"3","/var/www/frontend/src/theme.ts":"4","/var/www/frontend/src/components/SnackbarProvider.tsx":"5","/var/www/frontend/src/routes/AppRouter.tsx":"6","/var/www/frontend/src/components/Breadcrumbs.tsx":"7","/var/www/frontend/src/components/Navbar/index.tsx":"8","/var/www/frontend/src/routes/index.tsx":"9","/var/www/frontend/src/components/Navbar/Menu.tsx":"10","/var/www/frontend/src/pages/video/PageForm.tsx":"11","/var/www/frontend/src/pages/video/PageList.tsx":"12","/var/www/frontend/src/components/Page.tsx":"13","/var/www/frontend/src/pages/Dashboard.tsx":"14","/var/www/frontend/src/pages/cast-member/CastMemberList.tsx":"15","/var/www/frontend/src/pages/cast-member/CastMemberForm.tsx":"16","/var/www/frontend/src/pages/genre/GenreList.tsx":"17","/var/www/frontend/src/pages/genre/GenreForm.tsx":"18","/var/www/frontend/src/pages/category/CategoryForm.tsx":"19","/var/www/frontend/src/pages/category/CategoryList.tsx":"20","/var/www/frontend/src/pages/video/components/Form/index.tsx":"21","/var/www/frontend/src/pages/cast-member/components/Form.tsx":"22","/var/www/frontend/src/pages/category/components/Form.tsx":"23","/var/www/frontend/src/pages/category/components/Table.tsx":"24","/var/www/frontend/src/pages/genre/components/Form.tsx":"25","/var/www/frontend/src/pages/cast-member/components/Table.tsx":"26","/var/www/frontend/src/pages/genre/components/Table.tsx":"27","/var/www/frontend/src/util/http/video-http.ts":"28","/var/www/frontend/src/util/vendor/yup.ts":"29","/var/www/frontend/src/components/DefaultForm.tsx":"30","/var/www/frontend/src/components/SubmitAction.tsx":"31","/var/www/frontend/src/pages/video/components/Form/UploadField.tsx":"32","/var/www/frontend/src/components/AsyncAutocomplete.tsx":"33","/var/www/frontend/src/pages/video/components/Form/RatingField.tsx":"34","/var/www/frontend/src/util/http/cast-member-http.ts":"35","/var/www/frontend/src/util/http/category-http.ts":"36","/var/www/frontend/src/util/http/genre-http.ts":"37","/var/www/frontend/src/util/models.ts":"38","/var/www/frontend/src/components/Badge.tsx":"39","/var/www/frontend/src/hooks/useFilter.ts":"40","/var/www/frontend/src/components/Table/FilterResetButton.tsx":"41","/var/www/frontend/src/util/http/http-resource.ts":"42","/var/www/frontend/src/util/http/index.tsx":"43","/var/www/frontend/src/components/InputFile.tsx":"44","/var/www/frontend/src/components/Rating.tsx":"45","/var/www/frontend/src/components/Table/index.tsx":"46","/var/www/frontend/src/components/Table/DebouncedTableSearch.js":"47","/var/www/frontend/src/store/filter/index.ts":"48","/var/www/frontend/src/components/GridSelected.tsx":"49","/var/www/frontend/src/components/GridSelectedItem.tsx":"50","/var/www/frontend/src/hooks/useHttpHandled.ts":"51","/var/www/frontend/src/hooks/useCollectionManager.ts":"52","/var/www/frontend/src/pages/video/components/Form/CategoryField.tsx":"53","/var/www/frontend/src/pages/video/components/Form/GenreField.tsx":"54","/var/www/frontend/src/util/model-filter.ts":"55","/var/www/frontend/src/pages/video/components/Table.tsx":"56","/var/www/frontend/src/components/DeleteDialog.tsx":"57","/var/www/frontend/src/hooks/useDeleteCollection.ts":"58","/var/www/frontend/src/pages/video/components/Form/CastMemberField.tsx":"59","/var/www/frontend/src/components/loading/LoadingContext.tsx":"60","/var/www/frontend/src/components/loading/LoadingProvider.tsx":"61","/var/www/frontend/src/components/Spinner.tsx":"62","/var/www/frontend/src/hooks/useSnackbarFormError.ts":"63","/var/www/frontend/src/components/SnackbarUpload/index.tsx":"64","/var/www/frontend/src/components/SnackbarUpload/UploadItem.tsx":"65","/var/www/frontend/src/components/UploadProgress.tsx":"66","/var/www/frontend/src/components/SnackbarUpload/UploadAction.tsx":"67","/var/www/frontend/src/store/index.ts":"68","/var/www/frontend/src/store/upload/index.ts":"69","/var/www/frontend/src/store/root-saga.ts":"70","/var/www/frontend/src/store/upload/saga.ts":"71","/var/www/frontend/src/store/upload/getters.ts":"72","/var/www/frontend/src/pages/uploads/index.tsx":"73","/var/www/frontend/src/pages/uploads/UploadItem.tsx":"74","/var/www/frontend/src/pages/uploads/UploadAction.tsx":"75"},{"size":622,"mtime":1618795747449,"results":"76","hashOfConfig":"77"},{"size":425,"mtime":1618795747453,"results":"78","hashOfConfig":"77"},{"size":1088,"mtime":1619702210128,"results":"79","hashOfConfig":"77"},{"size":3314,"mtime":1618795747453,"results":"80","hashOfConfig":"77"},{"size":1113,"mtime":1618795747449,"results":"81","hashOfConfig":"77"},{"size":603,"mtime":1618795747453,"results":"82","hashOfConfig":"77"},{"size":2826,"mtime":1618795747449,"results":"83","hashOfConfig":"77"},{"size":955,"mtime":1618795747449,"results":"84","hashOfConfig":"77"},{"size":3009,"mtime":1618795747453,"results":"85","hashOfConfig":"77"},{"size":2267,"mtime":1618795747449,"results":"86","hashOfConfig":"77"},{"size":373,"mtime":1618795747449,"results":"87","hashOfConfig":"77"},{"size":799,"mtime":1618795747449,"results":"88","hashOfConfig":"77"},{"size":639,"mtime":1618795747449,"results":"89","hashOfConfig":"77"},{"size":224,"mtime":1618795747449,"results":"90","hashOfConfig":"77"},{"size":836,"mtime":1618795747449,"results":"91","hashOfConfig":"77"},{"size":294,"mtime":1618795747449,"results":"92","hashOfConfig":"77"},{"size":837,"mtime":1618795747449,"results":"93","hashOfConfig":"77"},{"size":295,"mtime":1618795747449,"results":"94","hashOfConfig":"77"},{"size":413,"mtime":1618795747449,"results":"95","hashOfConfig":"77"},{"size":821,"mtime":1618795747449,"results":"96","hashOfConfig":"77"},{"size":15711,"mtime":1618795747453,"results":"97","hashOfConfig":"77"},{"size":4791,"mtime":1618795747449,"results":"98","hashOfConfig":"77"},{"size":4724,"mtime":1618795747449,"results":"99","hashOfConfig":"77"},{"size":5714,"mtime":1618795747449,"results":"100","hashOfConfig":"77"},{"size":5758,"mtime":1618795747449,"results":"101","hashOfConfig":"77"},{"size":8213,"mtime":1618795747449,"results":"102","hashOfConfig":"77"},{"size":8116,"mtime":1618795747449,"results":"103","hashOfConfig":"77"},{"size":160,"mtime":1618795747453,"results":"104","hashOfConfig":"77"},{"size":397,"mtime":1618795747453,"results":"105","hashOfConfig":"77"},{"size":880,"mtime":1618795747449,"results":"106","hashOfConfig":"77"},{"size":1149,"mtime":1618795747449,"results":"107","hashOfConfig":"77"},{"size":2139,"mtime":1618795747449,"results":"108","hashOfConfig":"77"},{"size":3128,"mtime":1618795747449,"results":"109","hashOfConfig":"77"},{"size":2246,"mtime":1618795747449,"results":"110","hashOfConfig":"77"},{"size":176,"mtime":1618795747453,"results":"111","hashOfConfig":"77"},{"size":170,"mtime":1618795747453,"results":"112","hashOfConfig":"77"},{"size":160,"mtime":1618795747453,"results":"113","hashOfConfig":"77"},{"size":1595,"mtime":1618795747453,"results":"114","hashOfConfig":"77"},{"size":666,"mtime":1618795747449,"results":"115","hashOfConfig":"77"},{"size":7012,"mtime":1618795747449,"results":"116","hashOfConfig":"77"},{"size":721,"mtime":1618795747449,"results":"117","hashOfConfig":"77"},{"size":3753,"mtime":1618795747453,"results":"118","hashOfConfig":"77"},{"size":1233,"mtime":1618795747453,"results":"119","hashOfConfig":"77"},{"size":2065,"mtime":1618795747449,"results":"120","hashOfConfig":"77"},{"size":942,"mtime":1618795747449,"results":"121","hashOfConfig":"77"},{"size":3888,"mtime":1618795747449,"results":"122","hashOfConfig":"77"},{"size":2960,"mtime":1618795747449,"results":"123","hashOfConfig":"77"},{"size":2875,"mtime":1618795747453,"results":"124","hashOfConfig":"77"},{"size":727,"mtime":1618795747449,"results":"125","hashOfConfig":"77"},{"size":836,"mtime":1618795747449,"results":"126","hashOfConfig":"77"},{"size":568,"mtime":1618795747449,"results":"127","hashOfConfig":"77"},{"size":922,"mtime":1618795747449,"results":"128","hashOfConfig":"77"},{"size":4218,"mtime":1618795747449,"results":"129","hashOfConfig":"77"},{"size":3960,"mtime":1618795747449,"results":"130","hashOfConfig":"77"},{"size":240,"mtime":1618795747453,"results":"131","hashOfConfig":"77"},{"size":7804,"mtime":1618795747453,"results":"132","hashOfConfig":"77"},{"size":1131,"mtime":1618795747449,"results":"133","hashOfConfig":"77"},{"size":527,"mtime":1618795747449,"results":"134","hashOfConfig":"77"},{"size":3602,"mtime":1618795747449,"results":"135","hashOfConfig":"77"},{"size":114,"mtime":1618795747449,"results":"136","hashOfConfig":"77"},{"size":1956,"mtime":1618795747449,"results":"137","hashOfConfig":"77"},{"size":1026,"mtime":1618795747449,"results":"138","hashOfConfig":"77"},{"size":529,"mtime":1618795747449,"results":"139","hashOfConfig":"77"},{"size":3526,"mtime":1618795747449,"results":"140","hashOfConfig":"77"},{"size":2385,"mtime":1618795747449,"results":"141","hashOfConfig":"77"},{"size":1451,"mtime":1618795747449,"results":"142","hashOfConfig":"77"},{"size":2453,"mtime":1618795747449,"results":"143","hashOfConfig":"77"},{"size":689,"mtime":1618795747453,"results":"144","hashOfConfig":"77"},{"size":5286,"mtime":1618795747453,"results":"145","hashOfConfig":"77"},{"size":181,"mtime":1618795747453,"results":"146","hashOfConfig":"77"},{"size":2488,"mtime":1618795747453,"results":"147","hashOfConfig":"77"},{"size":648,"mtime":1618795747453,"results":"148","hashOfConfig":"77"},{"size":3117,"mtime":1618795747449,"results":"149","hashOfConfig":"77"},{"size":1982,"mtime":1618795747449,"results":"150","hashOfConfig":"77"},{"size":3059,"mtime":1618795747449,"results":"151","hashOfConfig":"77"},{"filePath":"152","messages":"153","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"1unvtb5",{"filePath":"154","messages":"155","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"156","messages":"157","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"158","messages":"159","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"160","messages":"161","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"162","messages":"163","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"164","messages":"165","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"166","messages":"167","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"168","messages":"169","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"170","messages":"171","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"172","messages":"173","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"174","messages":"175","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"176","messages":"177","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"178","messages":"179","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"180","messages":"181","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"182","messages":"183","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"184","messages":"185","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"186","messages":"187","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"188","messages":"189","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"190","messages":"191","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"192","messages":"193","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"194"},{"filePath":"195","messages":"196","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"197","messages":"198","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"199","messages":"200","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"201"},{"filePath":"202","messages":"203","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"204"},{"filePath":"205","messages":"206","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"207"},{"filePath":"208","messages":"209","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"210"},{"filePath":"211","messages":"212","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"213","messages":"214","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"215","messages":"216","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"217","messages":"218","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"219","messages":"220","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"221","messages":"222","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"223","messages":"224","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"225","messages":"226","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"227","messages":"228","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"229","messages":"230","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"231","messages":"232","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"233","messages":"234","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"235","messages":"236","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"237"},{"filePath":"238","messages":"239","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"240","messages":"241","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"242","messages":"243","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"244","messages":"245","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"246","messages":"247","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"248","messages":"249","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"250","messages":"251","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"252"},{"filePath":"253","messages":"254","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"255","messages":"256","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"257","messages":"258","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"259","messages":"260","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"261","messages":"262","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"263","messages":"264","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"265"},{"filePath":"266","messages":"267","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"268","messages":"269","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"270","messages":"271","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"272"},{"filePath":"273","messages":"274","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"275","messages":"276","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"277","messages":"278","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"279"},{"filePath":"280","messages":"281","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"282","messages":"283","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"284"},{"filePath":"285","messages":"286","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"287","messages":"288","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"289"},{"filePath":"290","messages":"291","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"292","messages":"293","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"294","messages":"295","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"296","messages":"297","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"298","messages":"299","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"300","messages":"301","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"302","messages":"303","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"304","messages":"305","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"306","messages":"307","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"308","messages":"309","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"310","messages":"311","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"312","messages":"313","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"/var/www/frontend/src/index.tsx",[],"/var/www/frontend/src/reportWebVitals.ts",[],"/var/www/frontend/src/App.tsx",[],"/var/www/frontend/src/theme.ts",[],"/var/www/frontend/src/components/SnackbarProvider.tsx",[],"/var/www/frontend/src/routes/AppRouter.tsx",[],"/var/www/frontend/src/components/Breadcrumbs.tsx",[],"/var/www/frontend/src/components/Navbar/index.tsx",[],"/var/www/frontend/src/routes/index.tsx",[],"/var/www/frontend/src/components/Navbar/Menu.tsx",[],"/var/www/frontend/src/pages/video/PageForm.tsx",[],"/var/www/frontend/src/pages/video/PageList.tsx",[],"/var/www/frontend/src/components/Page.tsx",[],"/var/www/frontend/src/pages/Dashboard.tsx",[],"/var/www/frontend/src/pages/cast-member/CastMemberList.tsx",[],"/var/www/frontend/src/pages/cast-member/CastMemberForm.tsx",[],"/var/www/frontend/src/pages/genre/GenreList.tsx",[],"/var/www/frontend/src/pages/genre/GenreForm.tsx",[],"/var/www/frontend/src/pages/category/CategoryForm.tsx",[],"/var/www/frontend/src/pages/category/CategoryList.tsx",[],"/var/www/frontend/src/pages/video/components/Form/index.tsx",["314","315","316","317","318"],"import * as React from 'react';\nimport * as yup from '../../../../util/vendor/yup';\nimport {useForm} from \"react-hook-form\";\nimport {yupResolver} from \"@hookform/resolvers/yup\";\nimport {useSnackbar} from \"notistack\";\nimport {useHistory, useParams} from \"react-router\";\n import {createRef, MutableRefObject, useContext, useEffect, useMemo, useRef, useState} from \"react\";\nimport videoHttp from \"../../../../util/http/video-http\";\nimport {Video, VideoFileFieldsMap} from \"../../../../util/models\";\nimport {DefaultForm} from \"../../../../components/DefaultForm\";\nimport {Card, CardContent, FormHelperText, Grid, Snackbar, TextField, useMediaQuery, useTheme} from \"@material-ui/core\";\nimport SubmitAction from \"../../../../components/SubmitAction\";\nimport RatingField from \"./RatingField\";\nimport UploadField from \"./UploadField\";\nimport {makeStyles, Theme} from \"@material-ui/core/styles\";\nimport Typography from \"@material-ui/core/Typography\";\nimport GenreField, {GenreFieldComponent} from \"./GenreField\";\nimport CategoryField, {CategoryFieldComponent} from \"./CategoryField\";\nimport CastMemberField, {CastMemberFieldComponent} from \"./CastMemberField\";\nimport {omit,zipObject} from 'lodash'\nimport {InputFileComponent} from \"../../../../components/InputFile\";\nimport LoadingContext from \"../../../../components/loading/LoadingContext\";\nimport SnackbarUpload from \"../../../../components/SnackbarUpload\";\nimport {useSelector,useDispatch} from 'react-redux';\nimport {FileInfo, Upload, UploadModule} from \"../../../../store/upload/types\";\nimport {Creators} from \"../../../../store/upload\";\nimport useSnackBarFormError from '../../../../hooks/useSnackbarFormError';\nimport {Simulate} from \"react-dom/test-utils\";\n\n\n\n\nconst useStyles = makeStyles((theme: Theme) => ({\n    cardUpload:{\n        borderRadius: \"4px\",\n        backgroundColor: \"#f5f5f5\",\n        margin: theme.spacing(2,0)\n    }\n}))\n\n\nconst SchemaValidation = yup.object().shape({\n    title: yup.string()\n        .label('Título')\n        .required()\n        .max(255),\n    description: yup.string()\n        .label('Sinopse')\n        .required(),\n    year_launched: yup.number()\n        .label('Ano de lançamento')\n        .required()\n        .min(1),\n    duration: yup.number()\n        .label('Duração')\n        .required()\n        .min(1),\n    categories: yup.array()\n        .min(1,'Categoria é Requerido')\n        .label('Categorias')\n        .required(),\n    genres: yup.array()\n        .label('Gêneros')\n        .required()\n        .min(1,'Gêneros é Requerido')\n        .test({\n            message: 'Cada gênero escolhido precisa ter pelo menos uma categoria selecionada',\n            test(value) { //array genres [{name, categories: []}]\n                if(value !== undefined) {\n                    return value.every(\n                        v => v.categories.filter(\n                            cat => this.parent.categories.map(c => c.id).includes(cat.id)\n                        ).length !== 0\n                    );\n                }else{\n                    return true;\n                }\n            }\n        }),\n    rating: yup.string()\n        .label('Classificação')\n        .required(),\n\n});\n\n\nconst fileFields = Object.keys(VideoFileFieldsMap);\nexport const Form = () => {\n    const classes = useStyles();\n    const {\n        register,\n        handleSubmit,\n        getValues,\n        setValue,\n        errors,\n        reset,\n        watch,\n        trigger,\n        formState\n    } = useForm<any>({\n        resolver: yupResolver(SchemaValidation),\n        defaultValues: {\n            rating: null,\n            cast_members: [],\n            genres: [],\n            categories: [],\n            opened: false,\n        }\n    });\n    const snackbar = useSnackbar();\n    const history = useHistory();\n    const {id} = useParams<{id: string}>();\n    const [video, setVideo] = useState<Video | null>(null);\n    console.log(id)\n    const loading = useContext(LoadingContext);\n\n\n\n    // Para saber quando é acima de md\n    const theme = useTheme();\n    const isGreaterMd = useMediaQuery(theme.breakpoints.up('md'));\n    const castMemberRef = useRef() as MutableRefObject<CastMemberFieldComponent>;\n    const genreRef = useRef() as MutableRefObject<GenreFieldComponent>;\n    const categoryRef = useRef() as MutableRefObject<CategoryFieldComponent>;\n    const uploadsRef = useRef(\n        zipObject(fileFields, fileFields.map(() => createRef()))\n    ) as MutableRefObject<{[key: string] : MutableRefObject<InputFileComponent>}>\n\n\n    const uploads = useSelector<UploadModule, Upload[]>(\n        (state) => state.upload.uploads\n    );\n    const dispatch = useDispatch();\n\n    useEffect(() => {\n        //Registrando de forma manual no useForm\n        [\n            'rating',\n            'opened',\n            'genres',\n            'categories',\n            'cast_members',\n            ...fileFields\n        ].forEach(name => register({name}));\n    }, [register]);\n\n\n    useEffect(() => {\n        if (!id) {\n            return;\n        }\n        let isSubscribed = true;\n        (async () => {\n            try {\n                const {data} = await videoHttp.get(id);\n                if (isSubscribed) {\n                    setVideo(data.data);\n                    reset(data.data);\n                }\n            } catch (error) {\n                console.error(error);\n                snackbar.enqueueSnackbar(\n                    'Não foi possível carregar as informações',\n                    {variant: 'error',}\n                )\n\n            }\n        })();\n        return () => {\n            isSubscribed = false;\n        }\n    }, []);\n\n    useSnackBarFormError(formState.submitCount, errors);\n\n    async function onSubmit(formData, event) {\n        const sendData = omit(\n            formData,\n            [...fileFields, 'cast_members', 'genres', 'categories']\n        );\n        sendData['cast_members_id'] = formData['cast_members'].map(cast_member => cast_member.id);\n        sendData['categories_id'] = formData['categories'].map(category => category.id);\n        sendData['genres_id'] = formData['genres'].map(genre => genre.id);\n\n        try {\n            const http = !video\n                ? videoHttp.create(sendData)\n                : videoHttp.update(video.id, sendData);\n            const {data} = await http;\n            snackbar.enqueueSnackbar(\n                'Vídeo salvo com sucesso',\n                {variant: 'success'}\n            );\n            uploadFiles(data);\n            id && resetForm(video);\n            setTimeout(() => {\n                event\n                    ? (\n                        id\n                            ? history.replace(`/videos/${data.id}/edit`)\n                            : history.push(`/videos/${data.id}/edit`)\n                    )\n                    : history.push('/videos')\n            });\n        } catch (error) {\n            console.error(error);\n            snackbar.enqueueSnackbar(\n                'Não foi possível salvar o vídeo',\n                {variant: 'error'}\n            )\n        }\n    }\n\n    function resetForm(data){\n        Object.keys(uploadsRef.current).forEach(\n            field => uploadsRef.current[field].current.clear()\n        );\n        castMemberRef.current.clear();\n        genreRef.current.clear();\n        categoryRef.current.clear();\n        reset(data)\n    }\n\n    function uploadFiles(video){\n        const files: FileInfo[] = fileFields\n            .filter(file => getValues()[file])\n            .map(fileField => ({fileField, file: getValues()[fileField]}))\n\n        if(!files.length){\n            return;\n        }\n\n        dispatch(Creators.addUpload({video, files}))\n\n        snackbar.enqueueSnackbar('', {\n            key: 'snackbar-upload',\n            persist: true,\n            anchorOrigin:{\n                horizontal: 'right',\n                vertical: 'bottom'\n            },\n            content: (key,message) => {\n                const id = key as any;\n                return <SnackbarUpload id={id}/>\n            }\n        })\n    }\n\n\n    return (\n        <DefaultForm\n            GridItemProps={{xs: 12}}\n            onSubmit={handleSubmit(onSubmit)}\n        >\n            <Grid container spacing={5}>\n                <Grid item xs={12} md={6}>\n                    <TextField\n                        name=\"title\"\n                        label=\"Título\"\n                        variant={'outlined'}\n                        fullWidth\n                        inputRef={register}\n                        disabled={loading}\n                        InputLabelProps={{shrink: true}}\n                        error={errors.title !== undefined}\n                        helperText={errors.title && errors.title.message}\n                    />\n                    <TextField\n                        name=\"description\"\n                        label=\"Sinopse\"\n                        multiline\n                        rows=\"4\"\n                        margin=\"normal\"\n                        variant=\"outlined\"\n                        fullWidth\n                        inputRef={register}\n                        disabled={loading}\n                        InputLabelProps={{shrink: true}}\n                        error={errors.description !== undefined}\n                        helperText={errors.description && errors.description.message}\n                    />\n                    <Grid container spacing={1}>\n                        <Grid item xs={6}>\n                            <TextField\n                                name=\"year_launched\"\n                                label=\"Ano de lançamento\"\n                                type=\"number\"\n                                margin=\"normal\"\n                                variant=\"outlined\"\n                                fullWidth\n                                inputRef={register}\n                                disabled={loading}\n                                InputLabelProps={{shrink: true}}\n                                error={errors.year_launched !== undefined}\n                                helperText={errors.year_launched && errors.year_launched.message}\n                            />\n                        </Grid>\n                        <Grid item xs={6}>\n                            <TextField\n                                name=\"duration\"\n                                label=\"Duração\"\n                                type=\"number\"\n                                margin=\"normal\"\n                                variant=\"outlined\"\n                                fullWidth\n                                inputRef={register}\n                                disabled={loading}\n                                InputLabelProps={{shrink: true}}\n                                error={errors.duration !== undefined}\n                                helperText={errors.duration && errors.duration.message}\n                            />\n                        </Grid>\n                    </Grid>\n                    <CastMemberField\n                        ref={castMemberRef}\n                        castMembers={watch('cast_members')}\n                        setCastMembers={(value) => setValue('cast_members', value, {shouldValidate: true})}\n                        error={errors.cast_members}\n                        disabled={loading}\n                    />\n\n                    <Grid container spacing={2}>\n                        <Grid item xs={12} md={6}>\n                            <GenreField\n                                ref={genreRef}\n                                genres={watch('genres')}\n                                setGenres={(value) => setValue('genres',value,{shouldValidate: true})}\n                                categories={watch('categories')}\n                                setCategories={(value) => setValue('categories',value,{shouldValidate: true})}\n                                error={errors.genres}\n                            />\n                        </Grid>\n                        <Grid item xs={12} md={6}>\n                            <CategoryField\n                                ref={categoryRef}\n                                categories={watch('categories')}\n                                setCategories={(value) => setValue('categories',value,{shouldValidate: true})}\n                                genres={watch('genres')}\n                                error={errors.categories}\n                            />\n                        </Grid>\n                        <Grid item xs={12}>\n                            <FormHelperText>\n                                Escolha os gêneros do vídeos\n                            </FormHelperText>\n                            <FormHelperText>\n                               Escolha pelo menos uma categoria de cada gênero\n                            </FormHelperText>\n                        </Grid>\n                    </Grid>\n                </Grid>\n                <Grid item xs={12} md={6}>\n                    <RatingField\n                        value={watch('rating')}\n                        setValue={(value) => setValue('rating',value,{shouldValidate: true})}\n                        error={errors.rating}\n                        disabled={loading}\n                        FormControlProps={{\n                            margin: isGreaterMd ? 'none' : 'normal'\n                        }}\n                    />\n                    <Card className={classes.cardUpload}>\n                        <CardContent>\n                            <Typography color=\"primary\" variant=\"h6\">\n                                Imagens\n                            </Typography>\n                            <UploadField\n                                ref={uploadsRef.current['thumb_file']}\n                                accept={'image/*'}\n                                label={'Thumb'}\n                                setValue={(value) => setValue('thumb_file',value)}\n                            />\n                            <UploadField\n                                ref={uploadsRef.current['banner_file']}\n                                accept={'image/*'}\n                                label={'Banner'}\n                                setValue={(value) => setValue('banner_file',value)}\n                            />\n                        </CardContent>\n                    </Card>\n                    <Card className={classes.cardUpload}>\n                        <CardContent>\n                            <Typography color=\"primary\" variant=\"h6\">\n                               Videos\n                            </Typography>\n                            <UploadField\n                                ref={uploadsRef.current['trailer_file']}\n                                accept={'video/mp4'}\n                                label={'Trailler'}\n                                setValue={(value) => setValue('trailer_file',value)}\n                            />\n                            <UploadField\n                                ref={uploadsRef.current['video_file']}\n                                accept={'video/mp4'}\n                                label={'Principal'}\n                                setValue={(value) => setValue('video_file',value)}\n                            />\n                        </CardContent>\n                    </Card>\n\n                </Grid>\n            </Grid>\n            <SubmitAction\n                disabledButtons={loading}\n                handleSalve={() => {\n                    trigger().then((valid) => {\n                        valid && onSubmit(getValues(), null)\n                    })\n                }\n                }\n            />\n        </DefaultForm>\n\n    );\n};\n","/var/www/frontend/src/pages/cast-member/components/Form.tsx",[],"/var/www/frontend/src/pages/category/components/Form.tsx",[],"/var/www/frontend/src/pages/category/components/Table.tsx",["319","320"],"import React, {useContext, useEffect,useRef, useState} from 'react';\nimport format from \"date-fns/format\"\nimport parseISO from \"date-fns/parseISO\"\nimport categoryHttp from \"../../../util/http/category-http\";\nimport {BadgeYes,BadgeNo} from '../../../components/Badge'\nimport {Category, ListResponse} from \"../../../util/models\";\nimport DefaultTable, {makeActionStyles, TableColumn} from '../../../components/Table'\nimport {useSnackbar} from \"notistack\";\nimport {IconButton, MuiThemeProvider} from \"@material-ui/core\";\nimport {Edit} from \"@material-ui/icons\";\nimport {Link} from \"react-router-dom\";\nimport FilterResetButton from \"../../../components/Table/FilterResetButton\";\nimport useFilter from \"../../../hooks/useFilter\";\nimport LoadingContext from \"../../../components/loading/LoadingContext\";\n\n\nconst columnsDefinition: TableColumn[] = [\n    {\n        name: \"id\",\n        label: \"Id\",\n        width: \"33%\",\n        options:{\n            sort: false,\n            filter: false\n        }\n    },\n    {\n        name: \"name\",\n        label: \"Nome\",\n        width: \"40%\"\n    },\n    {\n        name: \"is_active\",\n        label: \"Ativo?\",\n        options: {\n            customBodyRender(value, tableMeta, updateValue ){\n                return value ? <BadgeYes/> : <BadgeNo/>\n            },\n            filterOptions: {\n                names: ['Sim','Não']\n            },\n        },\n        width: '4%'\n    },\n    {\n        name: \"created_at\",\n        label: \"Criado em\",\n        width: '10%',\n        options: {\n            customBodyRender(value, tableMeta, updateValue ){\n                return <span>{format(parseISO(value),'dd/MM/yyyy')}</span>\n            },\n            filter: false\n        }\n    },\n    {\n        name: \"actions\",\n        label: \"Ações\",\n        width: '13%',\n        options: {\n            customBodyRender(value, tableMeta, updateValue): JSX.Element {\n                return(\n                    <IconButton\n                        color={'secondary'}\n                        component={Link}\n                        to={`/categorias/${tableMeta.rowData[0]}/edit`}\n                    >\n                        <Edit/>\n                    </IconButton>\n                )\n            },\n            filter: false\n        }\n\n    }\n];\n\nconst debounceTime = 200;\nconst debouncedSearchTime = 300;\nconst rowsPerPage = 10;\nconst rowsPerPageOptions =  [10,25,50];\n\nconst Table = () => {\n    const snackbar = useSnackbar();\n    const subscribed = useRef(true);\n    const [data,setData] = useState<Category[]>([]);\n    const loading = useContext(LoadingContext);\n\n\n     const {\n\n         debouncedFilterState,\n         filterManager,\n         filterState,\n         totalRecords,\n         setTotalRecords\n     } = useFilter({\n         columns: columnsDefinition,\n         debounceTime: debounceTime,\n         rowsPerPage,\n         rowsPerPageOptions\n     });\n\n\n    useEffect(() => {\n        subscribed.current = true;\n        filterManager.pushHistory();\n        getData();\n        return () => {\n            subscribed.current = false;\n        }\n    },[\n        filterManager.clearSearchText(debouncedFilterState.search),\n        debouncedFilterState.pagination.page,\n        debouncedFilterState.pagination.per_page,\n        debouncedFilterState.order\n    ]);\n\n\n    async function getData(){\n        try {\n            const {data} = await categoryHttp.list<ListResponse<Category>>({\n                queryParam: {\n                    search: filterManager.clearSearchText(filterState.search),\n                    page: filterState.pagination.page,\n                    per_page: filterState.pagination.per_page,\n                    sort: filterState.order.sort,\n                    dir: filterState.order.dir\n                }\n            });\n            if(subscribed.current){\n                setData(data.data)\n                setTotalRecords(data.meta.total)\n            }\n            }catch (error){\n                console.error(error);\n                if(categoryHttp.isCancelledRequest(error)){\n                    return;\n                }\n                snackbar.enqueueSnackbar(\n                    'Não foi possível carregar as informações',\n                    {variant: 'error'}\n                )\n\n            }\n        }\n\n        return (\n        <MuiThemeProvider theme={makeActionStyles(columnsDefinition.length - 1)}>\n            <DefaultTable\n                columns={columnsDefinition}\n                data={data}\n                title={'Listagem de Categorias'}\n                loading={loading}\n                debouncedSearchTime={debouncedSearchTime}\n                options={{\n                    serverSide: true,\n                    searchText: filterState.search as any,\n                    page: filterState.pagination.page - 1,\n                    rowsPerPage: filterState.pagination.per_page,\n                    rowsPerPageOptions,\n                    count: totalRecords,\n                    customToolbar: () => (\n                        <FilterResetButton handleClick={() => {\n                          filterManager.resetFilter();\n                            // dispatch(Creators.setReset())\n                        }}/>\n                    ),\n                    onSearchChange: (value) => filterManager.changeSearch(value),\n                    onChangePage: (page) => filterManager.changePage(page),\n                    onChangeRowsPerPage: (perPage) => filterManager.changeRowsPerPage(perPage),\n                    onColumnSortChange: (changedColumn: string, direction: string) =>\n                        filterManager.changeColumnSort(changedColumn, direction)\n                }}\n            />\n        </MuiThemeProvider>\n    );\n};\n\nexport default Table;","/var/www/frontend/src/pages/genre/components/Form.tsx",["321"],"import React, {useEffect, useState} from \"react\";\nimport {MenuItem, TextField} from \"@material-ui/core\";\nimport {useForm} from \"react-hook-form\";\nimport categoryHttp from \"../../../util/http/category-http\";\nimport genreHttp from \"../../../util/http/genre-http\";\nimport {useHistory, useParams} from \"react-router\";\nimport {useSnackbar} from \"notistack\";\nimport * as yup from \"../../../util/vendor/yup\";\nimport { yupResolver } from '@hookform/resolvers/yup';\nimport SubmitAction from \"../../../components/SubmitAction\";\nimport {DefaultForm} from \"../../../components/DefaultForm\";\n\ninterface Genre {\n    id: string,\n    name: string,\n    categories_id: string[]\n}\n\nconst SchemaValidation = yup.object({\n    name: yup.string()\n        .label('Nome')\n        .required()\n        .max(255),\n    categories_id: yup.array()\n        .label('Categorias')\n        .required()\n});\n\n\nconst Form = () => {\n    const history = useHistory();\n    const {id} = useParams<{id: string}>();\n    const snackbar = useSnackbar();\n\n    const [categories,setCategories] = useState<Genre[]>([]);\n    const [genre,setGenre] = useState<Genre | null>(null);\n    const [loading, setLoading] = useState<boolean>(false)\n\n    const {\n        register,\n        handleSubmit,\n        getValues,\n        setValue,\n        watch,\n        errors,\n        reset,\n        trigger\n    } = useForm<Genre>({\n        resolver: yupResolver(SchemaValidation),\n        defaultValues: {\n            categories_id: []\n        }\n    });\n\n    useEffect(() => {\n        register({name: 'categories_id'})\n    },[register])\n\n    useEffect(() => {\n       let isSubscribed = true;\n        (async () =>{\n            setLoading(true);\n            const promise = [categoryHttp.list({queryParam: {all: ''}})];\n            if(id){\n                promise.push(genreHttp.get(id))\n            }\n            try{\n                if(isSubscribed){\n                    const [categoriesResponse, genteResponse] = await Promise.all(promise);\n                    setCategories(categoriesResponse.data.data);\n                    if(id){\n                        setGenre(genteResponse.data.data);\n                        reset({\n                            ...genteResponse.data.data,\n                            categories_id: genteResponse.data.data.categories.map(category => category.id)\n                        });\n                    }\n                }\n            }catch(error){\n                console.error(error);\n                snackbar.enqueueSnackbar(\n                    'Não foi possível carregar as informações',\n                    {variant: 'error'}\n                )\n            }finally {\n                setLoading(false);\n            }\n        })();\n        return() => {\n            isSubscribed = false;\n        }\n    },[]);\n\n    async function onSubmit(formData,event){\n        setLoading(true);\n        try{\n            const http = !genre\n                ?genreHttp.create(formData)\n                :genreHttp.update(genre.id, formData)\n            const {data} = await http;\n            snackbar.enqueueSnackbar(\n                'Gênero salvo com Sucesso',\n                {variant: 'success'}\n            )\n            setTimeout(() => {\n                event ? (\n                        id\n                            ? history.replace(`/genres/${data.data.id}/edit`)\n                            : history.push(`/genres/${data.data.id}/edit`)\n                    )\n                    :history.push('/genres')\n            })\n        }catch(error) {\n            console.log(error);\n            snackbar.enqueueSnackbar(\n                'Não é possível salvar o gênero',\n                {variant: 'error'}\n            )\n        }finally{\n            setLoading(false)\n        }\n    }\n    return (\n        <DefaultForm onSubmit={handleSubmit(onSubmit)}>\n            <TextField\n                name={\"name\"}\n                label={\"Nome\"}\n                fullWidth\n                variant={\"outlined\"}\n                inputRef={register}\n                disabled={loading}\n                error={errors.name !== undefined}\n                helperText={errors.name?.message}\n                InputLabelProps={{\n                    shrink: true\n                }}\n\n            />\n            <TextField\n                select\n                name={\"categories_id\"}\n                value={watch('categories_id')}\n                label={\"Categorias\"}\n                fullWidth\n                variant={\"outlined\"}\n                margin={\"normal\"}\n                onChange={(e) => {\n                    setValue('categories_id', e.target.value,{ shouldValidate: true })\n                }}\n                SelectProps={{\n                    multiple: true\n                }}\n                disabled={loading}\n                error={errors.categories_id !== undefined}\n               // helperText={errors.categories_id && errors.categories_id.message}\n                InputLabelProps={{\n                    shrink: true\n                }}\n            >\n                <MenuItem value=\"\">\n                    <em>Selecione uma categoria</em>\n                </MenuItem>\n                {\n                    categories.map(\n                        (category,key) => (\n                            <MenuItem key={key} value={category.id}>{category.name}</MenuItem>\n                        )\n                    )\n                }\n            </TextField>\n            <SubmitAction\n                disabledButtons={loading}\n                handleSalve={() => {\n                    trigger().then((valid) => {\n                        valid && onSubmit(getValues(), null)\n                    })\n                }\n                }\n            />\n        </DefaultForm>\n    );\n};\n\nexport default Form;","/var/www/frontend/src/pages/cast-member/components/Table.tsx",["322","323","324"],"import * as React from 'react';\nimport {useEffect, useState} from \"react\";\nimport format from \"date-fns/format\";\nimport parseISO from \"date-fns/parseISO\";\nimport castMemberHttp from \"../../../util/http/cast-member-http\";\nimport {CastMember, CastMemberTypeMap, ListResponse} from \"../../../util/models\";\nimport {IconButton, MuiThemeProvider} from \"@material-ui/core\";\nimport {Link} from \"react-router-dom\";\nimport EditIcon from \"@material-ui/icons/Edit\";\nimport DefaultTable, {makeActionStyles, TableColumn} from '../../../components/Table';\nimport {useSnackbar} from \"notistack\";\nimport {useRef} from \"react\";\nimport useFilter from \"../../../hooks/useFilter\";\nimport FilterResetButton from \"../../../components/Table/FilterResetButton\";\nimport * as yup from '../../../util/vendor/yup';\nimport {invert} from 'lodash';\n\nconst castMemberNames = Object.values(CastMemberTypeMap);\n\nconst columnsDefinition: TableColumn[] = [\n    {\n        name: 'id',\n        label: 'ID',\n        width: '30%',\n        options: {\n            sort: false,\n            filter: false\n        }\n    },\n    {\n        name: \"name\",\n        label: \"Nome\",\n        width: \"43%\",\n        options: {\n            filter: false\n        }\n    },\n    {\n        name: \"type\",\n        label: \"Tipo\",\n        width: '4%',\n        options: {\n            filterOptions: {\n                names: castMemberNames\n            },\n            customBodyRender: (value, tableMeta, updateValue) => { //typescript any\n                return CastMemberTypeMap[value];\n            },\n        }\n    },\n    {\n        name: \"created_at\",\n        label: \"Criado em\",\n        width: '10%',\n        options: {\n            filter: false,\n            customBodyRender(value, tableMeta, updateValue) {\n                return <span>{format(parseISO(value), 'dd/MM/yyyy')}</span>\n            }\n        }\n    },\n    {\n        name: \"actions\",\n        label: \"Ações\",\n        width: '13%',\n        options: {\n            filter: false,\n            sort: false,\n            customBodyRender: (value, tableMeta) => {\n                return (\n                    <span>\n                    <IconButton\n                        color={'secondary'}\n                        component={Link}\n                        to={`/cast-members/${tableMeta.rowData[0]}/edit`}\n                    >\n                        <EditIcon/>\n                    </IconButton>\n                </span>\n                )\n            }\n        }\n    }\n];\nconst debounceTime = 300;\nconst debouncedSearchTime = 300;\nconst rowsPerPage = 15;\nconst rowsPerPageOptions = [15, 25, 50];\nconst Table = () => {\n\n    const snackbar = useSnackbar();\n    const subscribed = useRef(true);\n    const [data, setData] = useState<CastMember[]>([]);\n    const [loading, setLoading] = useState<boolean>(false);\n\n\n    const {\n        columns,\n        filterManager,\n        filterState,\n        debouncedFilterState,\n        totalRecords,\n        setTotalRecords,\n    } = useFilter({\n        columns: columnsDefinition,\n        debounceTime: debounceTime,\n        rowsPerPage,\n        rowsPerPageOptions,\n        extraFilter: {\n            createValidationSchema: () => {\n                return yup.object().shape({\n                    type: yup.string()\n                        .nullable()\n                        .transform(value => {\n                            return !value || !castMemberNames.includes(value) ? undefined : value;\n                        })\n                        .default(null)\n                })\n            },\n            formatSearchParams: (debouncedState) => {\n                return debouncedState.extraFilter\n                    ? {\n                        ...(\n                            debouncedState.extraFilter.type &&\n                            {type: debouncedState.extraFilter.type}\n                        ),\n                    }\n                    : undefined\n            },\n            getStateFromURL: (queryParams) => {\n                return {\n                    type: queryParams.get('type')\n                }\n            }\n        }\n    });\n    //?type=Diretor\n    const indexColumnType = columns.findIndex(c => c.name === 'type');\n    const columnType = columns[indexColumnType];\n    const typeFilterValue = filterState.extraFilter && filterState.extraFilter.type as never;\n    (columnType.options as any).filterList = typeFilterValue ? [typeFilterValue] : [];\n\n    const serverSideFilterList = columns.map(column => []);\n    if (typeFilterValue) {\n        serverSideFilterList[indexColumnType] = [typeFilterValue];\n    }\n\n    useEffect(() => {\n        subscribed.current = true;\n        filterManager.pushHistory();\n        getData();\n        return () => {\n            subscribed.current = false;\n        }\n    }, [\n        filterManager.clearSearchText(debouncedFilterState.search),\n        debouncedFilterState.pagination.page,\n        debouncedFilterState.pagination.per_page,\n        debouncedFilterState.order,\n        // Incluido esse Json para não chamar getData desnecessário.\n        JSON.stringify(debouncedFilterState.extraFilter)\n    ]);\n\n    async function getData() {\n        setLoading(true);\n        try {\n            const {data} = await castMemberHttp.list<ListResponse<CastMember>>({\n                queryParam: {\n                    search: filterManager.clearSearchText(debouncedFilterState.search),\n                    page: debouncedFilterState.pagination.page,\n                    per_page: debouncedFilterState.pagination.per_page,\n                    sort: debouncedFilterState.order.sort,\n                    dir: debouncedFilterState.order.dir,\n                    ...(\n                        debouncedFilterState.extraFilter &&\n                        debouncedFilterState.extraFilter.type &&\n                        {type: invert(CastMemberTypeMap)[debouncedFilterState.extraFilter.type]}\n                    )\n                }\n            });\n            if (subscribed.current) {\n                setData(data.data);\n                setTotalRecords(data.meta.total);\n            }\n        } catch (error) {\n            console.error(error);\n            if (castMemberHttp.isCancelledRequest(error)) {\n                return;\n            }\n            snackbar.enqueueSnackbar(\n                'Não foi possível carregar as informações',\n                {variant: 'error',}\n            )\n        } finally {\n            setLoading(false);\n        }\n    }\n\n    return (\n        <MuiThemeProvider theme={makeActionStyles(columnsDefinition.length - 1)}>\n            <DefaultTable\n                title=\"\"\n                columns={columns}\n                data={data}\n                loading={loading}\n                debouncedSearchTime={debouncedSearchTime}\n                options={{\n                    serverSide: true,\n                    responsive: \"vertical\",\n                    searchText: filterState.search as any,\n                    page: filterState.pagination.page - 1,\n                    rowsPerPage: filterState.pagination.per_page,\n                    rowsPerPageOptions,\n                    count: totalRecords,\n                    onFilterChange: (column, filterList, type) => {\n                        const columnIndex = columns.findIndex(c => c.name === column);\n                        filterManager.changeExtraFilter({\n                            [column as any]: filterList[columnIndex].length ? filterList[columnIndex][0] : null\n                        })\n                    },\n                    customToolbar: () => (\n                        <FilterResetButton\n                            handleClick={() => filterManager.resetFilter()}\n                        />\n                    ),\n                    onSearchChange: (value) => filterManager.changeSearch(value),\n                    onChangePage: (page) => filterManager.changePage(page),\n                    onChangeRowsPerPage: (perPage) => filterManager.changeRowsPerPage(perPage),\n                    onColumnSortChange: (changedColumn: string, direction: string) =>\n                        filterManager.changeColumnSort(changedColumn, direction)\n                }}\n            />\n        </MuiThemeProvider>\n    );\n};\n\nexport default Table;\n","/var/www/frontend/src/pages/genre/components/Table.tsx",["325","326","327","328","329"],"import React, {useEffect, useRef, useState} from 'react';\nimport {MUIDataTableColumn} from \"mui-datatables\";\nimport format from \"date-fns/format\"\nimport parseISO from \"date-fns/parseISO\"\nimport categoryHttp from \"../../../util/http/category-http\";\nimport genreHttp from \"../../../util/http/genre-http\";\nimport {useSnackbar} from \"notistack\";\nimport {Category, Genre, ListResponse} from \"../../../util/models\";\nimport useFilter from \"../../../hooks/useFilter\";\nimport * as yup from \"../../../util/vendor/yup\";\nimport {MuiThemeProvider} from \"@material-ui/core\";\nimport DefaultTable, {makeActionStyles} from '../../../components/Table'\nimport FilterResetButton from \"../../../components/Table/FilterResetButton\";\n\n\n\n\nconst columnsDefinition: MUIDataTableColumn[] = [\n    {\n        name: \"name\",\n        label: \"Nome\",\n        options: {\n            filter: false\n        }\n    },\n    {\n        name: \"categories\",\n        label: \"Categorias\",\n        options: {\n            filterType: 'multiselect',\n            filterOptions: {\n                names: []\n            },\n            customBodyRender(value, tableMeta, updateValue ){\n                return value.map(value => value.name).join(', ')\n            },\n        }\n    },\n    {\n        name: \"created_at\",\n        label: \"Criado em\",\n        options: {\n            customBodyRender(value, tableMeta, updateValue ){\n                return <span>{format(parseISO(value),'dd/MM/yyyy')}</span>\n            },\n            filter: false\n        }\n    }\n];\nconst debounceTime = 300;\nconst debouncedSearchTime = 300;\nconst rowsPerPage = 15;\nconst rowsPerPageOptions = [15, 25, 50];\n\nconst Table = () => {\n    const snackbar = useSnackbar();\n    const subscribed = useRef(true);\n    const [data, setData] = useState<Genre[]>([]);\n    const [loading, setLoading] = useState<boolean>(false);\n\n\n    const {\n        columns,\n        filterManager,\n        filterState,\n        debouncedFilterState,\n        totalRecords,\n        setTotalRecords,\n    } = useFilter({\n        columns: columnsDefinition,\n        debounceTime: debounceTime,\n        rowsPerPage,\n        rowsPerPageOptions,\n        extraFilter: {\n            createValidationSchema: () => {\n                return yup.object().shape({\n                    categories: yup.mixed()\n                        .nullable()\n                        .transform(value => {\n                            return !value || value === '' ? undefined : value.split(',');\n                        })\n                        .default(null),\n                })\n            },\n            formatSearchParams: (debouncedState) => {\n                return debouncedState.extraFilter ? {\n                    ...(\n                        debouncedState.extraFilter.categories &&\n                        {categories: debouncedState.extraFilter.categories.join(',')}\n                    )\n                } : undefined\n            },\n            getStateFromURL: (queryParams) => {\n                return {\n                    categories: queryParams.get('categories')\n                }\n            }\n        }\n    });\n\n    /**\n     * Bloco para pegar o indice de categoria e depois pegar a variavele atribuir o valor\n     * e chamar no filter\n    **/\n    const indexColumnCategories = columns.findIndex(c => c.name === 'categories');\n    const columnCategories = columns[indexColumnCategories];\n    const categoriesFilterValue = filterState.extraFilter && filterState.extraFilter.categories;\n    (columnCategories.options as any).filterList = categoriesFilterValue ? categoriesFilterValue : [];\n\n\n    useEffect(() => {\n        let isSubscribed = true;\n        (async () =>{\n            try{\n                const {data} = await categoryHttp.list({queryParam: {all: ''}});\n                if(isSubscribed){\n                    (columnCategories.options as any).filterOptions.names = data.data.map(category => category.name)\n                }\n            }catch (error){\n                console.error(error);\n                snackbar.enqueueSnackbar(\n                    'Não foi possível carregar as informações',\n                    {variant: 'error',}\n                )\n            }\n\n        })();\n        return () => {\n            isSubscribed = false;\n        }\n    },[]);\n\n    useEffect(() => {\n        let isSubscribed = true;\n        (async () =>{\n            const {data} = await genreHttp.list();\n            if(isSubscribed){\n                setData(data.data)\n            }\n        })();\n        return () => {\n            isSubscribed = false;\n        }\n    },[]);\n\n    useEffect(() => {\n        subscribed.current = true;\n        filterManager.pushHistory();\n        getData();\n        return () => {\n            subscribed.current = false;\n        }\n    }, [\n        filterManager.clearSearchText(debouncedFilterState.search),\n        debouncedFilterState.pagination.page,\n        debouncedFilterState.pagination.per_page,\n        debouncedFilterState.order,\n        JSON.stringify(debouncedFilterState.extraFilter)\n    ]);\n\n    async function getData() {\n        setLoading(true);\n        try {\n            const {data} = await genreHttp.list<ListResponse<Genre>>({\n                queryParam: {\n                    search: filterManager.clearSearchText(debouncedFilterState.search),\n                    page: debouncedFilterState.pagination.page,\n                    per_page: debouncedFilterState.pagination.per_page,\n                    sort: debouncedFilterState.order.sort,\n                    dir: debouncedFilterState.order.dir,\n                    ...(\n                        debouncedFilterState.extraFilter &&\n                        debouncedFilterState.extraFilter.categories &&\n                        {categories: debouncedFilterState.extraFilter.categories.join(',')}\n                    )\n                }\n            });\n            if (subscribed.current) {\n                setData(data.data);\n                setTotalRecords(data.meta.total);\n            }\n        } catch (error) {\n            console.error(error);\n            if (genreHttp.isCancelledRequest(error)) {\n                return;\n            }\n            snackbar.enqueueSnackbar(\n                'Não foi possível carregar as informações',\n                {variant: 'error',}\n            )\n        } finally {\n            setLoading(false);\n        }\n    }\n\n\n\n\n    return (\n        <MuiThemeProvider theme={makeActionStyles(columnsDefinition.length - 1)}>\n            <DefaultTable\n                columns={columnsDefinition}\n                data={data}\n                title={'Listagem de Gêneros'}\n                loading={loading}\n                debouncedSearchTime={debouncedSearchTime}\n                options={{\n                    serverSide: true,\n                    searchText: filterState.search as any,\n                    page: filterState.pagination.page - 1,\n                    rowsPerPage: filterState.pagination.per_page,\n                    rowsPerPageOptions,\n                    count: totalRecords,\n                    onFilterChange: (column, filterList, type) => {\n                        const columnIndex = columns.findIndex(c => c.name === column);\n                        filterManager.changeExtraFilter({\n                            [column as any]: filterList[columnIndex].length ? filterList[columnIndex] : null\n                        })\n                    },\n                    customToolbar: () => (\n                        <FilterResetButton handleClick={() => {\n                            filterManager.resetFilter();\n                        }}/>\n                    ),\n                    onSearchChange: (value) => filterManager.changeSearch(value),\n                    onChangePage: (page) => filterManager.changePage(page),\n                    onChangeRowsPerPage: (perPage) => filterManager.changeRowsPerPage(perPage),\n                    onColumnSortChange: (changedColumn: string, direction: string) =>\n                        filterManager.changeColumnSort(changedColumn, direction)\n                }}\n            />\n        </MuiThemeProvider>\n\n    );\n};\n\nexport default Table;","/var/www/frontend/src/util/http/video-http.ts",[],"/var/www/frontend/src/util/vendor/yup.ts",[],"/var/www/frontend/src/components/DefaultForm.tsx",[],"/var/www/frontend/src/components/SubmitAction.tsx",[],"/var/www/frontend/src/pages/video/components/Form/UploadField.tsx",[],"/var/www/frontend/src/components/AsyncAutocomplete.tsx",[],"/var/www/frontend/src/pages/video/components/Form/RatingField.tsx",[],"/var/www/frontend/src/util/http/cast-member-http.ts",[],"/var/www/frontend/src/util/http/category-http.ts",[],"/var/www/frontend/src/util/http/genre-http.ts",[],"/var/www/frontend/src/util/models.ts",[],"/var/www/frontend/src/components/Badge.tsx",[],"/var/www/frontend/src/hooks/useFilter.ts",["330"]," import {Dispatch, Reducer, useEffect, useReducer, useState} from \"react\";\nimport reducer, {Creators} from \"../store/filter\";\nimport {MUIDataTableColumn} from \"mui-datatables\";\nimport {State as FilterState, Action as FilterActions} from \"../store/filter/types\";\nimport {useDebounce} from \"use-debounce\";\nimport {useHistory} from 'react-router';\nimport {History} from 'history';\nimport {isEqual } from 'lodash';\nimport * as yup from '../util/vendor/yup';\n\ninterface FilterManageOptions{\n    columns: MUIDataTableColumn[];\n    rowsPerPage: number;\n    rowsPerPageOptions: number[];\n    debounceTime: number;\n    history: History;\n    extraFilter?: ExtraFilter;\n}\n\ninterface ExtraFilter{\n    getStateFromURL: (queryParams: URLSearchParams) => any,\n    formatSearchParams: (debouncedState: FilterState) => any,\n    createValidationSchema: () => any\n}\n\ninterface UseFilterOptions extends Omit<FilterManageOptions,'history'>{\n\n}\n\nexport default function useFilter(options: UseFilterOptions){\n    const history = useHistory();\n    const filterManager = new FilterManager({...options, history});\n    const INITIAL_STATE = filterManager.getStateFromURL();\n    const [filterState, dispatch] = useReducer<Reducer<FilterState, FilterActions>>(reducer,INITIAL_STATE);\n    const [totalRecords, setTotalRecords] = useState<number>(0);\n    const [debouncedFilterState] = useDebounce(filterState,options.debounceTime);\n\n\n    useEffect(() => {\n        filterManager.replaceHistory();\n    },[filterManager])\n\n\n    filterManager.state = filterState;\n    filterManager.dispatch = dispatch;\n    return{\n        columns: filterManager.columns,\n        filterManager,\n        filterState,\n        debouncedFilterState,\n        dispatch,\n        totalRecords,\n        setTotalRecords\n    }\n}\n\nexport class FilterManager{\n\n    schema;\n    state: FilterState = null as any;\n    dispatch: Dispatch<FilterActions> = null as any;\n    columns: MUIDataTableColumn[];\n    rowsPerPage: number;\n    rowsPerPageOptions: number[];\n    history: History;\n    extraFilter?: ExtraFilter;\n\n\n    constructor(options: FilterManageOptions) {\n        const {columns, rowsPerPage, rowsPerPageOptions, history, extraFilter} = options;\n        this.columns = columns;\n        this.rowsPerPage = rowsPerPage;\n        this.rowsPerPageOptions = rowsPerPageOptions;\n        this.history = history;\n        this.extraFilter = extraFilter;\n        this.createValidationSchema();\n    }\n\n    changeSearch(value){\n        this.dispatch(Creators.setSearch({search: value}));\n    }\n\n    changePage(page){\n        this.dispatch(Creators.setPage({page: page + 1}));\n    }\n\n    changeRowsPerPage(perPage){\n        this.dispatch(Creators.setPerPage({per_page: perPage}))\n    }\n\n    changeColumnSort(changedColumn: string, direction: string){\n        this.dispatch(Creators.setOrder({\n            dir: direction,\n            sort: changedColumn\n        }))\n    }\n\n    changeExtraFilter(data) { //{type: 'Diretor'}\n        this.dispatch(Creators.updateExtraFilter(data));\n    }\n\n\n    resetFilter(){\n        const INITIAL_STATE = {\n            ...this.schema.cast({}),\n            search: {value: null, update: true}\n        };\n        this.dispatch(Creators.setReset({\n            state: INITIAL_STATE\n        }));\n    }\n\n\n    clearSearchText(text){\n        let newText = text;\n        if(text && text.value !== undefined){\n            newText = text.value;\n        }\n        return newText;\n    }\n\n    replaceHistory(){\n        this.history.replace({\n            pathname: this.history.location.pathname,\n            search: \"?\" + new URLSearchParams(this.formatSearchParams() as any),\n            state: this.state\n        })\n    }\n\n    pushHistory(){\n        const newLocation = {\n            pathname: this.history.location.pathname,\n            search: \"?\" + new URLSearchParams(this.formatSearchParams() as any),\n            state:{\n                ...this.state,\n                search: this.clearSearchText(this.state.search)\n            }\n        }\n        const oldState = this.history.location.state;\n        const nextState = this.state;\n        if(isEqual(oldState, nextState)){\n            return;\n        }\n\n        this.history.push(newLocation);\n    }\n\n    private formatSearchParams(){\n       const search = this.clearSearchText(this.state.search);\n       return {\n           ...(search && search !== '' && {search: search}),\n           ...(this.state.pagination.page !== 1 && {page: this.state.pagination.page}),\n           ...(this.state.pagination.per_page !== 15 && {per_page: this.state.pagination.per_page}),\n           ...(this.state.order.sort && {\n               sort: this.state.order.sort,\n               dir: this.state.order.dir\n           }),\n           ...(this.extraFilter && this.extraFilter.formatSearchParams(this.state))\n       }\n    }\n\n    getStateFromURL(){\n        const queryParams = new URLSearchParams(this.history.location.search.substr(1));\n        return this.schema.cast({\n            search: queryParams.get('search'),\n            pagination: {\n                page: queryParams.get('page'),\n                per_page: queryParams.get('per_page')\n            },\n            order:{\n                sort: queryParams.get('sort'),\n                dir: queryParams.get('dir')\n            },\n            ...(\n                this.extraFilter && {\n                    extraFilter: this.extraFilter.getStateFromURL(queryParams)\n                }\n            )\n        })\n    }\n\n    private createValidationSchema(){\n        this.schema = yup.object().shape({\n            search: yup.string()\n                .transform(value => !value ? undefined : value)\n                .default(''),\n            pagination: yup.object().shape({\n                page: yup.number()\n                    .transform(value => isNaN(value) || parseInt(value) < 1 ? undefined : value)\n                    .default(1),\n                per_page: yup.number()\n                    .oneOf(this.rowsPerPageOptions)\n                    .transform(value => isNaN(value) ? undefined : value)\n                    .default(this.rowsPerPage)\n            }),\n            order: yup.object().shape({\n                sort: yup.string()\n                    .nullable()\n                    .transform(value => {\n                        const columnsName = this.columns\n                            .filter(column => !column.options || column.options.sort !== false)\n                            .map(column => column.name);\n                        return columnsName.includes(value) ? value : undefined;\n                    })\n                    .default(null),\n                dir: yup.string()\n                    .nullable()\n                    .transform(value => !value || !['asc','desc'].includes(value.toLowerCase()) ? undefined : value)\n                    .default(null)\n            }),\n            ...(\n                this.extraFilter && {\n                    extraFilter: this.extraFilter.createValidationSchema()\n                }\n            )\n        })\n    }\n}","/var/www/frontend/src/components/Table/FilterResetButton.tsx",[],"/var/www/frontend/src/util/http/http-resource.ts",[],"/var/www/frontend/src/util/http/index.tsx",[],"/var/www/frontend/src/components/InputFile.tsx",[],"/var/www/frontend/src/components/Rating.tsx",[],"/var/www/frontend/src/components/Table/index.tsx",[],"/var/www/frontend/src/components/Table/DebouncedTableSearch.js",["331","332"],"import React, {useCallback, useEffect, useState} from 'react';\nimport Grow from '@material-ui/core/Grow';\nimport TextField from '@material-ui/core/TextField';\nimport SearchIcon from '@material-ui/icons/Search';\nimport IconButton from '@material-ui/core/IconButton';\nimport ClearIcon from '@material-ui/icons/Clear';\nimport { makeStyles } from '@material-ui/core/styles';\nimport {debounce} from 'lodash';\n\n\nconst useStyles = makeStyles(\n    theme => ({\n        main: {\n            display: 'flex',\n            flex: '1 0 auto',\n        },\n        searchIcon: {\n            color: theme.palette.text.secondary,\n            marginTop: '10px',\n            marginRight: '8px',\n        },\n        searchText: {\n            flex: '0.8 0',\n        },\n        clearIcon: {\n            '&:hover': {\n                color: theme.palette.error.main,\n            },\n        },\n    }),\n    { name: 'MUIDataTableSearch' },\n);\n\nconst DebouncedTableSearch = ({ options, searchText, onSearch, onHide, debouceTime }) => {\n    const classes = useStyles();\n    const [text, setText] = useState(searchText);\n    let value = text;\n\n    const dispatchOnSearch = useCallback(debounce(value => onSearch(value),debouceTime),[]);\n\n    useEffect(() => {\n        dispatchOnSearch(text);\n    },[text,dispatchOnSearch])\n\n    useEffect(() => {\n        if(searchText && searchText.value !== undefined)\n        {\n            const value = searchText.value;\n            if(value){\n                onSearch(value);\n            }else{\n                try{\n                    onHide();\n                }catch (e){\n\n                }\n            }\n        }\n    },[searchText, onSearch])\n\n\n    const handleTextChange = event => {\n        const value = event.target.value;\n        setText(value);\n    };\n\n    const onKeyDown = event => {\n        if (event.key === 'Escape') {\n            onHide();\n        }\n    };\n\n    return (\n        <Grow appear in={true} timeout={300}>\n            <div className={classes.main}>\n                <SearchIcon className={classes.searchIcon} />\n                <TextField\n                    className={classes.searchText}\n                    autoFocus={true}\n                    InputProps={{\n                        'data-test-id': options.textLabels.toolbar.search,\n                    }}\n                    inputProps={{\n                        'aria-label': options.textLabels.toolbar.search,\n                    }}\n                    value={value || ''}\n                    onKeyDown={onKeyDown}\n                    onChange={handleTextChange}\n                    fullWidth={true}\n                    placeholder={options.searchPlaceholder}\n                    {...(options.searchProps ? options.searchProps : {})}\n                />\n                <IconButton className={classes.clearIcon} onClick={onHide}>\n                    <ClearIcon />\n                </IconButton>\n            </div>\n        </Grow>\n    );\n};\n\nexport default DebouncedTableSearch;\n","/var/www/frontend/src/store/filter/index.ts",[],"/var/www/frontend/src/components/GridSelected.tsx",[],"/var/www/frontend/src/components/GridSelectedItem.tsx",[],"/var/www/frontend/src/hooks/useHttpHandled.ts",[],"/var/www/frontend/src/hooks/useCollectionManager.ts",[],"/var/www/frontend/src/pages/video/components/Form/CategoryField.tsx",["333"],"import * as React from 'react';\nimport useHttpHandled from \"../../../../hooks/useHttpHandled\";\nimport AsyncAutocomplete, {AsyncAutocompleteComponent} from \"../../../../components/AsyncAutocomplete\";\nimport GridSelected from \"../../../../components/GridSelected\";\nimport GridSelectedItem from \"../../../../components/GridSelectedItem\";\nimport Typography from \"@material-ui/core/Typography\";\nimport {Genre} from \"../../../../util/models\";\nimport categoryHttp from \"../../../../util/http/category-http\";\nimport useCollectionManager from \"../../../../hooks/useCollectionManager\";\nimport {FormControl, FormHelperText, FormControlProps} from \"@material-ui/core\";\nimport {makeStyles, Theme} from \"@material-ui/core/styles\";\nimport {grey} from \"@material-ui/core/colors\";\nimport {getGenresFromCategory} from \"../../../../util/model-filter\";\nimport {MutableRefObject, useImperativeHandle, useRef} from \"react\";\n\n\nconst useStyles = makeStyles((theme: Theme) => ({\n    genresSubtitle: {\n        color: grey[\"800\"],\n        fontSize: '0.8rem'\n    }\n}));\n\n\ninterface CategoryFieldProps {\n    categories: any[];\n    setCategories: (categories) => void;\n    genres: Genre[];\n    error: any;\n    disabled?: boolean;\n    FormControlProps?: FormControlProps;\n\n};\n\nexport interface CategoryFieldComponent{\n    clear: () => void\n}\n\nconst CategoryField = React.forwardRef<CategoryFieldComponent, CategoryFieldProps>((props, ref) => {\n    const classes = useStyles();\n    const {genres,categories,setCategories,error, disabled} = props;\n    const {addItem,removeItem} = useCollectionManager(categories,setCategories);\n    const autocompleteRef = useRef() as MutableRefObject<AsyncAutocompleteComponent>;\n    /* Usado para não aparecer a mensagem de erro no cancelamento*/\n    const autocompleteHttp =useHttpHandled();\n    function fetchOptions(searchText) {\n        return autocompleteHttp(\n            categoryHttp\n                .list({\n                    queryParam: {\n                        genres: genres.map(genre => genre.id).join(','),\n                        all: \"\"\n                    }\n                })\n        ).then(data => data.data)\n    }\n    useImperativeHandle(ref, () => ({\n        clear: () => autocompleteRef.current.clear()\n    }));\n\n\n    return (\n        <>\n        <AsyncAutocomplete\n            ref={autocompleteRef}\n            AutocompleteProps={{\n                getOptionLabel: option => option.name,\n                onChange: (event,value) => addItem(value),\n                disabled: !genres.length || disabled == true\n            }}\n            fetchOptions={fetchOptions}\n            TextFieldProps={{\n                label: 'Categorias'\n            }}\n        />\n            <FormControl\n                error={error !== undefined}\n                disabled={disabled === true}\n                {...props.FormControlProps}\n                margin={\"normal\"}\n                fullWidth\n            >\n                <GridSelected>\n                    {\n                        categories.map((category, key) => {\n                            const genresFromCategory = getGenresFromCategory(genres, category)\n                                .map(genre => genre.name)\n                                .join(',');\n                            return (\n                                <GridSelectedItem\n                                    key={key}\n                                    onDelete={() => removeItem(category)} xs={12}\n                                >\n                                    <Typography noWrap={true}>\n                                        {category.name}\n                                    </Typography>\n                                    <Typography noWrap={true} className={classes.genresSubtitle}>\n                                        Gêneros: {genresFromCategory}\n                                    </Typography>\n                                </GridSelectedItem>\n                            )\n                        })\n                    }\n\n                </GridSelected>\n                {\n                    error && <FormHelperText>{error.message}</FormHelperText>\n                }\n            </FormControl>\n        </>\n    );\n});\n\nexport default CategoryField;","/var/www/frontend/src/pages/video/components/Form/GenreField.tsx",[],"/var/www/frontend/src/util/model-filter.ts",[],"/var/www/frontend/src/pages/video/components/Table.tsx",["334","335"],"import * as React from 'react';\nimport {useEffect, useRef, useState} from \"react\";\nimport format from \"date-fns/format\";\nimport parseISO from \"date-fns/parseISO\";\nimport videoHttp from \"../../../util/http/video-http\";\nimport {Video, ListResponse} from \"../../../util/models\";\nimport DefaultTable, {makeActionStyles, TableColumn} from '../../../components/Table';\nimport {useSnackbar} from \"notistack\";\nimport {IconButton, MuiThemeProvider} from \"@material-ui/core\";\nimport {Link} from \"react-router-dom\";\nimport EditIcon from '@material-ui/icons/Edit';\nimport FilterResetButton from \"../../../components/Table/FilterResetButton\";\nimport useFilter from \"../../../hooks/useFilter\";\nimport useDeleteCollection from \"../../../hooks/useDeleteCollection\";\nimport DeleteDialog from \"../../../components/DeleteDialog\";\n\n\n\nconst columnsDefinition: TableColumn[] = [\n    {\n        name: 'id',\n        label: 'ID',\n        width: '30%',\n        options: {\n            sort: false,\n            filter: false\n        }\n    },\n    {\n        name: \"title\",\n        label: \"Título\",\n        width: '20%',\n        options: {\n            filter: false\n        }\n    },\n    {\n        name: \"genres\",\n        label: \"Gêneros\",\n        width: '13%',\n        options: {\n            sort: false,\n            filter: false,\n            customBodyRender: (value, tableMeta, updateValue) => {\n                return value.map(value => value.name).join(', ');\n            }\n        }\n    },\n    {\n        name: \"categories\",\n        label: \"Categorias\",\n        width: '12%',\n        options: {\n            sort: false,\n            filter: false,\n            customBodyRender: (value, tableMeta, updateValue) => {\n                return value.map(value => value.name).join(', ');\n            }\n        }\n    },\n    {\n        name: \"created_at\",\n        label: \"Criado em\",\n        width: '10%',\n        options: {\n            filter: false,\n            customBodyRender(value, tableMeta, updateValue) {\n                return <span>{format(parseISO(value), 'dd/MM/yyyy')}</span>\n            }\n        }\n    },\n    {\n        name: \"actions\",\n        label: \"Ações\",\n        width: '13%',\n        options: {\n            sort: false,\n            filter: false,\n            customBodyRender: (value, tableMeta) => {\n                return (\n                    <IconButton\n                        color={'secondary'}\n                        component={Link}\n                        to={`/videos/${tableMeta.rowData[0]}/edit`}\n                    >\n                        <EditIcon/>\n                    </IconButton>\n                )\n            }\n        }\n    }\n];\n\nconst debounceTime = 300;\nconst debouncedSearchTime = 300;\nconst rowsPerPage = 15;\nconst rowsPerPageOptions = [15, 25, 50];\nconst Table = () => {\n    const snackbar = useSnackbar();\n    const subscribed = useRef(true);\n    const [data, setData] = useState<Video[]>([]);\n    const [loading, setLoading] = useState<boolean>(false);\n    const {openDeleteDialog, setOpenDeleteDialog, rowsToDelete, setRowsToDelete} = useDeleteCollection();\n\n\n\n\n    const {\n        columns,\n        filterManager,\n        filterState,\n        debouncedFilterState,\n        totalRecords,\n        setTotalRecords,\n    } = useFilter({\n        columns: columnsDefinition,\n        debounceTime: debounceTime,\n        rowsPerPage,\n        rowsPerPageOptions,\n\n    });\n\n    useEffect(() => {\n        subscribed.current = true;\n        filterManager.pushHistory();\n        getData();\n        return () => {\n            subscribed.current = false;\n        }\n    }, [\n        filterManager.clearSearchText(debouncedFilterState.search),\n        debouncedFilterState.pagination.page,\n        debouncedFilterState.pagination.per_page,\n        debouncedFilterState.order\n    ]);\n\n    async function getData() {\n        setLoading(true);\n        try {\n            const {data} = await videoHttp.list<ListResponse<Video>>({\n                queryParam: {\n                    search: filterManager.clearSearchText(debouncedFilterState.search),\n                    page: debouncedFilterState.pagination.page,\n                    per_page: debouncedFilterState.pagination.per_page,\n                    sort: debouncedFilterState.order.sort,\n                    dir: debouncedFilterState.order.dir,\n                }\n            });\n            if (subscribed.current) {\n                setData(data.data);\n                setTotalRecords(data.meta.total);\n                if(openDeleteDialog){\n                    setOpenDeleteDialog(false);\n                }\n            }\n        } catch (error) {\n            console.error(error);\n            if (videoHttp.isCancelledRequest(error)) {\n                return;\n            }\n            snackbar.enqueueSnackbar(\n                'Não foi possível carregar as informações',\n                {variant: 'error',}\n            )\n        } finally {\n            setLoading(false);\n        }\n    }\n\n    function deleteRows(confirmed: boolean) {\n        if (!confirmed) {\n            setOpenDeleteDialog(false);\n            return;\n        }\n        const ids = rowsToDelete\n            .data\n            .map(value => data[value.index].id)\n            .join(',');\n        videoHttp\n            .deleteCollection({ids})\n            .then(response => {\n                snackbar.enqueueSnackbar(\n                    'Registros excluídos com sucesso',\n                    {variant: 'success'}\n                );\n                if(\n                    rowsToDelete.data.length === filterState.pagination.per_page\n                    && filterState.pagination.page > 1\n                ){\n                    const page = filterState.pagination.page - 2;\n                    filterManager.changePage(page);\n                }else{\n                    getData();\n                }\n            })\n            .catch((error) => {\n                console.error(error);\n                snackbar.enqueueSnackbar(\n                    'Não foi possível excluir os registros',\n                    {variant: 'error',}\n                )\n            })\n    }\n\n\n    return (\n        <MuiThemeProvider theme={makeActionStyles(columnsDefinition.length - 1)}>\n            <DeleteDialog open={openDeleteDialog} handleClose={deleteRows}/>\n            <DefaultTable\n                title=\"Vídeos\"\n                columns={columns}\n                data={data}\n                loading={loading}\n                debouncedSearchTime={debouncedSearchTime}\n                //ref={tableRef}\n                options={{\n                    serverSide: true,\n                    //responsive: \"scrollMaxHeight\",\n                    searchText: filterState.search as any,\n                    page: filterState.pagination.page - 1,\n                    rowsPerPage: filterState.pagination.per_page,\n                    rowsPerPageOptions,\n                    count: totalRecords,\n                    customToolbar: () => (\n                        <FilterResetButton\n                            handleClick={() => filterManager.resetFilter()}\n                        />\n                    ),\n                    onSearchChange: (value) => filterManager.changeSearch(value),\n                    onChangePage: (page) => filterManager.changePage(page),\n                    onChangeRowsPerPage: (perPage) => filterManager.changeRowsPerPage(perPage),\n                    onColumnSortChange: (changedColumn: string, direction: string) =>\n                        filterManager.changeColumnSort(changedColumn, direction),\n                    onRowsDelete: (rowsDeleted: any) => {\n                        setRowsToDelete(rowsDeleted as any);\n                        return false;\n                    },\n                }}\n            />\n        </MuiThemeProvider>\n    );\n};\n\nexport default Table;\n\n","/var/www/frontend/src/components/DeleteDialog.tsx",[],"/var/www/frontend/src/hooks/useDeleteCollection.ts",[],"/var/www/frontend/src/pages/video/components/Form/CastMemberField.tsx",["336"],"import * as React from 'react';\nimport AsyncAutocomplete, {AsyncAutocompleteComponent} from \"../../../../components/AsyncAutocomplete\";\nimport GridSelected from \"../../../../components/GridSelected\";\nimport GridSelectedItem from \"../../../../components/GridSelectedItem\";\nimport {FormControl, FormControlProps, FormHelperText, Grid, Typography} from \"@material-ui/core\";\nimport useHttpHandled from \"../../../../hooks/useHttpHandled\";\nimport useCollectionManager from \"../../../../hooks/useCollectionManager\";\nimport castMemberHttp from \"../../../../util/http/cast-member-http\";\nimport {MutableRefObject, RefAttributes, useRef} from \"react\";\nimport {useImperativeHandle} from \"react\";\n\ninterface CastMemberFieldProps extends RefAttributes<CastMemberFieldProps>{\n    castMembers: any[],\n    setCastMembers: (castMembers) => void\n    error: any\n    disabled?: boolean;\n    FormControlProps?: FormControlProps\n}\n\nexport interface CastMemberFieldComponent {\n    clear: () => void\n}\n\nconst CastMemberField = React.forwardRef<CastMemberFieldComponent, CastMemberFieldProps>((props, ref) => {\n    const {\n        castMembers,\n        setCastMembers,\n        error,\n        disabled\n    } = props;\n    const autocompleteHttp = useHttpHandled();\n    const {addItem, removeItem} = useCollectionManager(castMembers, setCastMembers);\n    const autocompleteRef = useRef() as MutableRefObject<AsyncAutocompleteComponent>;\n\n    function fetchOptions(searchText) {\n        return autocompleteHttp(\n            castMemberHttp\n                .list({\n                    queryParam: {\n                        search: searchText, all: \"\"\n                    }\n                })\n        ).then(data => data.data)\n    }\n\n    useImperativeHandle(ref, () => ({\n        clear: () => autocompleteRef.current.clear()\n    }));\n\n    return (\n        <>\n            <AsyncAutocomplete\n                ref={autocompleteRef}\n                fetchOptions={fetchOptions}\n                AutocompleteProps={{\n                    //autoSelect: true,\n                    clearOnEscape: true,\n                    freeSolo: true,\n                    getOptionLabel: option => option.name,\n                    getOptionSelected: (option, value) => option.id === value.id,\n                    onChange: (event, value) => addItem(value),\n                    disabled\n                }}\n                TextFieldProps={{\n                    label: 'Elenco',\n                    error: error !== undefined\n                }}\n            />\n            <FormControl\n                margin={\"normal\"}\n                fullWidth\n                error={error !== undefined}\n                disabled={disabled === true}\n                {...props.FormControlProps}\n            >\n                <GridSelected>\n                    {\n                        castMembers.map((castMember, key) => (\n                            <GridSelectedItem\n                                key={key}\n                                onDelete={() => {\n                                    removeItem(castMember)\n                                }}\n                                xs={6}>\n                                <Typography noWrap={true}>\n                                    {castMember.name}\n                                </Typography>\n                            </GridSelectedItem>\n                        ))\n                    }\n                </GridSelected>\n                {\n                    error && <FormHelperText>{error.message}</FormHelperText>\n                }\n            </FormControl>\n        </>\n    );\n});\n\nexport default CastMemberField;\n","/var/www/frontend/src/components/loading/LoadingContext.tsx",[],"/var/www/frontend/src/components/loading/LoadingProvider.tsx",["337"],"import * as React from 'react';\nimport LoadingContext from \"./LoadingContext\";\nimport {useEffect, useMemo, useState} from \"react\";\nimport {\n    addGlobalRequestInterceptor,\n    addGlobalResponseInterceptor,\n    removeGlobalRequestInterceptor, removeGlobalResponseInterceptor\n} from \"../../util/http\";\n\ninterface LoadingProviderProps{\n    children: React.ReactNode;\n}\n\n\nconst LoadingProvider = (props: LoadingProviderProps) => {\n    const [loading, setLoading] = useState<boolean>(false);\n    const [countRequest, setCountRequest] = useState(0);\n\n\n\n    useMemo(() => {\n        let isSubscribed = true;\n        const requestIds = addGlobalRequestInterceptor((config) => {\n            if (isSubscribed && !config.headers.hasOwnProperty('x-ignore-loading')) {\n                setLoading(true);\n                setCountRequest(prevState => prevState + 1);\n            }\n            return config;\n        })\n\n        const responseIds = addGlobalResponseInterceptor((response) =>{\n            if (isSubscribed && !response.config.headers.hasOwnProperty('x-ignore-loading')) {\n                decrementCountRequest();\n            }\n            return response\n        }, (error) => {\n            if (isSubscribed && !error.config.headers.hasOwnProperty('x-ignore-loading')) {\n                decrementCountRequest();\n            }\n            return Promise.reject(error)\n        })\n\n        return () => {\n            isSubscribed = false;\n            removeGlobalRequestInterceptor(requestIds);\n            removeGlobalResponseInterceptor(responseIds);\n        }\n    },[true])\n\n    useEffect(() => {\n        if(!countRequest){\n            setLoading(false);\n        }\n    },[countRequest])\n\n\n\n    function decrementCountRequest(){\n        setCountRequest(prevState => prevState - 1);\n    }\n\n    return (\n        <LoadingContext.Provider value={loading}>\n            {props.children}\n        </LoadingContext.Provider>\n    );\n};\n\nexport default LoadingProvider;","/var/www/frontend/src/components/Spinner.tsx",[],"/var/www/frontend/src/hooks/useSnackbarFormError.ts",["338"],"import {useEffect} from 'react';\nimport {useSnackbar} from \"notistack\";\n\nconst UseSnackbarFormError = (submitCount, errors) => {\n    const snackbar = useSnackbar();\n    useEffect(() => {\n        const hasError = Object.keys(errors).length !== 0;\n        if(submitCount > 0 && hasError){\n            snackbar.enqueueSnackbar(\n                'Formulário Inválido. Revejas os campos marcados de vermelhos',\n                {variant: 'error'}\n            )\n        }\n    },[submitCount]);\n};\n\nexport default UseSnackbarFormError;\n","/var/www/frontend/src/components/SnackbarUpload/index.tsx",[],"/var/www/frontend/src/components/SnackbarUpload/UploadItem.tsx",[],"/var/www/frontend/src/components/UploadProgress.tsx",[],"/var/www/frontend/src/components/SnackbarUpload/UploadAction.tsx",[],"/var/www/frontend/src/store/index.ts",[],"/var/www/frontend/src/store/upload/index.ts",[],"/var/www/frontend/src/store/root-saga.ts",[],"/var/www/frontend/src/store/upload/saga.ts",[],"/var/www/frontend/src/store/upload/getters.ts",[],"/var/www/frontend/src/pages/uploads/index.tsx",[],"/var/www/frontend/src/pages/uploads/UploadItem.tsx",[],"/var/www/frontend/src/pages/uploads/UploadAction.tsx",[],{"ruleId":"339","severity":1,"message":"340","line":7,"column":62,"nodeType":"341","messageId":"342","endLine":7,"endColumn":69},{"ruleId":"339","severity":1,"message":"343","line":11,"column":50,"nodeType":"341","messageId":"342","endLine":11,"endColumn":58},{"ruleId":"339","severity":1,"message":"344","line":28,"column":9,"nodeType":"341","messageId":"342","endLine":28,"endColumn":17},{"ruleId":"339","severity":1,"message":"345","line":130,"column":11,"nodeType":"341","messageId":"342","endLine":130,"endColumn":18},{"ruleId":"346","severity":1,"message":"347","line":172,"column":8,"nodeType":"348","endLine":172,"endColumn":10,"suggestions":"349"},{"ruleId":"346","severity":1,"message":"350","line":112,"column":7,"nodeType":"348","endLine":117,"endColumn":6,"suggestions":"351"},{"ruleId":"346","severity":1,"message":"352","line":113,"column":9,"nodeType":"353","endLine":113,"endColumn":67},{"ruleId":"346","severity":1,"message":"347","line":92,"column":7,"nodeType":"348","endLine":92,"endColumn":9,"suggestions":"354"},{"ruleId":"346","severity":1,"message":"350","line":155,"column":8,"nodeType":"348","endLine":162,"endColumn":6,"suggestions":"355"},{"ruleId":"346","severity":1,"message":"352","line":156,"column":9,"nodeType":"353","endLine":156,"endColumn":67},{"ruleId":"346","severity":1,"message":"352","line":161,"column":9,"nodeType":"353","endLine":161,"endColumn":57},{"ruleId":"339","severity":1,"message":"356","line":8,"column":9,"nodeType":"341","messageId":"342","endLine":8,"endColumn":17},{"ruleId":"346","severity":1,"message":"357","line":131,"column":7,"nodeType":"348","endLine":131,"endColumn":9,"suggestions":"358"},{"ruleId":"346","severity":1,"message":"350","line":153,"column":8,"nodeType":"348","endLine":159,"endColumn":6,"suggestions":"359"},{"ruleId":"346","severity":1,"message":"352","line":154,"column":9,"nodeType":"353","endLine":154,"endColumn":67},{"ruleId":"346","severity":1,"message":"352","line":158,"column":9,"nodeType":"353","endLine":158,"endColumn":57},{"ruleId":"346","severity":1,"message":"360","line":32,"column":11,"nodeType":"361","endLine":32,"endColumn":67},{"ruleId":"346","severity":1,"message":"362","line":39,"column":30,"nodeType":"341","endLine":39,"endColumn":41},{"ruleId":"346","severity":1,"message":"363","line":59,"column":7,"nodeType":"348","endLine":59,"endColumn":29,"suggestions":"364"},{"ruleId":"365","severity":1,"message":"366","line":69,"column":54,"nodeType":"367","messageId":"368","endLine":69,"endColumn":56},{"ruleId":"346","severity":1,"message":"350","line":130,"column":8,"nodeType":"348","endLine":135,"endColumn":6,"suggestions":"369"},{"ruleId":"346","severity":1,"message":"352","line":131,"column":9,"nodeType":"353","endLine":131,"endColumn":67},{"ruleId":"339","severity":1,"message":"370","line":5,"column":56,"nodeType":"341","messageId":"342","endLine":5,"endColumn":60},{"ruleId":"346","severity":1,"message":"371","line":48,"column":8,"nodeType":"372","endLine":48,"endColumn":12},{"ruleId":"346","severity":1,"message":"373","line":14,"column":7,"nodeType":"348","endLine":14,"endColumn":20,"suggestions":"374"},"@typescript-eslint/no-unused-vars","'useMemo' is defined but never used.","Identifier","unusedVar","'Snackbar' is defined but never used.","'Simulate' is defined but never used.","'uploads' is assigned a value but never used.","react-hooks/exhaustive-deps","React Hook useEffect has missing dependencies: 'id', 'reset', and 'snackbar'. Either include them or remove the dependency array.","ArrayExpression",["375"],"React Hook useEffect has missing dependencies: 'filterManager' and 'getData'. Either include them or remove the dependency array.",["376"],"React Hook useEffect has a complex expression in the dependency array. Extract it to a separate variable so it can be statically checked.","CallExpression",["377"],["378"],"'Category' is defined but never used.","React Hook useEffect has missing dependencies: 'columnCategories.options' and 'snackbar'. Either include them or remove the dependency array.",["379"],["380"],"The 'filterManager' object construction makes the dependencies of useEffect Hook (at line 41) change on every render. To fix this, wrap the initialization of 'filterManager' in its own useMemo() Hook.","VariableDeclarator","React Hook useCallback received a function whose dependencies are unknown. Pass an inline function instead.","React Hook useEffect has a missing dependency: 'onHide'. Either include it or remove the dependency array. If 'onHide' changes too often, find the parent component that defines it and wrap that definition in useCallback.",["381"],"eqeqeq","Expected '===' and instead saw '=='.","BinaryExpression","unexpected",["382"],"'Grid' is defined but never used.","The true literal is not a valid dependency because it never changes. You can safely remove it.","Literal","React Hook useEffect has missing dependencies: 'errors' and 'snackbar'. Either include them or remove the dependency array.",["383"],{"desc":"384","fix":"385"},{"desc":"386","fix":"387"},{"desc":"384","fix":"388"},{"desc":"386","fix":"389"},{"desc":"390","fix":"391"},{"desc":"386","fix":"392"},{"desc":"393","fix":"394"},{"desc":"386","fix":"395"},{"desc":"396","fix":"397"},"Update the dependencies array to be: [id, reset, snackbar]",{"range":"398","text":"399"},"Update the dependencies array to be: [debouncedFilterState.pagination.page, debouncedFilterState.pagination.per_page, debouncedFilterState.order, filterManager, getData]",{"range":"400","text":"401"},{"range":"402","text":"399"},{"range":"403","text":"401"},"Update the dependencies array to be: [columnCategories.options, snackbar]",{"range":"404","text":"405"},{"range":"406","text":"401"},"Update the dependencies array to be: [searchText, onSearch, onHide]",{"range":"407","text":"408"},{"range":"409","text":"401"},"Update the dependencies array to be: [errors, snackbar, submitCount]",{"range":"410","text":"411"},[5599,5601],"[id, reset, snackbar]",[3064,3270],"[debouncedFilterState.pagination.page, debouncedFilterState.pagination.per_page, debouncedFilterState.order, filterManager, getData]",[2777,2779],[4754,5087],[4249,4251],"[columnCategories.options, snackbar]",[4748,5012],[1625,1647],"[searchText, onSearch, onHide]",[3573,3779],[470,483],"[errors, snackbar, submitCount]"]